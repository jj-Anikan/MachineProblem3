*********   Start fetch cycle  *********
 st = 0	rt = '[pc] -> mar'	imar rac = 1 rn = 3
 st = 1	rt = '[[mar]] -> mdr'	read
 st = 2	rt = '[mdr] -> ir'	omdr iir
 st = 3	rt = '[pc]+1 -> q'	rac = 1 rn = 3 ib p1 oadder
 st = 4	rt = '[q] -> pc'		oq wac = 1 wn = 3
	cond = 'ir158'  value = 0 nst = 10
	cond = 'ir1512' value = 0 nst = 20
	nst = 155


*********   	Halt execution cycle	  *********
 st = 10 halt

**********     Single Operand Instruction   *******

*** START: Update temp reg based on ADDR MOD *****
 st = 20
      cond = 'ir64' value = 0 nst = 25
      cond = 'ir64' value = 1 nst = 30
      cond = 'ir64' value = 2 nst = 35
      cond = 'ir64' value = 3 nst = 40
      cond = 'ir64' value = 4 nst = 55
      cond = 'ir64' value = 5 nst = 55
      nst = 0

***************** Register mode ******************
 st = 25 rt = '[dst]-> t5' 		it5 rac = 3 
       nst = 150

************* Register Indirect mode *************
 st = 30 rt = '[dst]  -> t4'    	it4 rac = 3 
      nst = 60

*************** Autoincrement mode ***************
 st = 35 rt = '[dst]  -> t4'    	it4 rac = 3
 st = 36 rt = '[dst]+1-> q'  	ib p1 oadder rac = 3
 st = 37 rt = '[q]    -> dst'     	oq wac = 3   
       nst = 60

*************** Autodecrement mode ***************
 st = 40 rt = '[dst]  -> t1'   	rac = 3 it1 
 st = 41 rt = '[t1]-1 -> q'   	oadder comp oa  
 st = 42 rt = '[q]    -> dst'    	wac = 3 oq  
 st = 43 rt = '[dst]  -> t4'   	rac = 3 it4    
       nst = 60
      
****************** Indexed mode ******************
 st = 45 rt = '[mdr]  -> t1'   	it1 omdr
 st = 46 rt = '[t1]+[dst]-> q' 	rac = 3 ib oa oadder
 st = 47 rt = '[q]    -> t4'     	it4 oq
       nst = 60

**************** Absolute mode *******************
 st = 50 rt = '[mdr]  -> t4'   	omdr it4  
       nst = 60

******** SECOND FETCH for Index, #,$ *************
 st = 55 rt = '[pc]   -> MAR'  	rac = 1 rn = 3 imar
 st = 56 rt = '[[MAR]]-> mdr'       read
 st = 57 rt = '[pc]+1 -> q'  	oadder p1 ib rac = 1 rn = 3   
 st = 58 rt = '[q]    -> pc'    	wac = 1 wn = 3 oq 
       cond = 'ir64' value = 4 nst = 45
       cond = 'ir64' value = 5 nst = 50

***** END: Update temp reg based on ADDR MOD *****
 
***** START: READ DESTINATION OPERAND from MEM ***
 st = 60 rt = '[t4]   -> MAR' 	imar ot4 
 st = 61 rt = '[[MAR]]-> mdr' 	read
 st = 62 rt = '[mdr]  -> t5' 	omdr it5 
       nst = 150

***** END: READ DESTINATION OPERAND from MEM ***

************* START: ALU single inst *************
 st = 70
       cond = 'ir118' value = 2 nst = 75
       cond = 'ir118' value = 3 nst = 80
       cond = 'ir118' value = 4 nst = 85
       nst = 10 

************* INCREMENT INSTRUCTION **************
 st = 75 rt = '[t5]   -> t1' 	it1 ot5 
 st = 76 rt = '[t1]+1 -> q' 	oadder p1 oa newv newc 
 st = 77 rt = '[q]    -> t2' 	it2 oq 
       nst = 90

************ DECREMENT INSTRUCTION ***************
 st = 80 rt = '[t5]   -> t1' 	it1 ot5 
 st = 81 rt = '[t1]-1 -> q' 	oadder comp oa newv newc 
 st = 82 rt = '[q]    -> t2' 	it2 oq 
       nst = 90

************ NEGATION INSTRUCTION ***************

 st = 85 rt = '0-[t5] -> q'         ib comp ot5 oadder p1 newv newc
 st = 86 rt = '[q]    -> t2' 	it2 oq
       nst = 90
 
*************  END: ALU single inst  *************

********* START: Write back the data *************
 st = 90
       cond = 'ir64' value = 0 nst = 95
       cond = 'ir64' value = 1 nst = 100
       cond = 'ir64' value = 2 nst = 100
       cond = 'ir64' value = 3 nst = 100
       cond = 'ir64' value = 4 nst = 100
       cond = 'ir64' value = 5 nst = 100

************* Register Mode (dst) *****************
*### We already handled in the ALU instruction ##*
 st = 95 rt = '[t2]   -> dst' 	wac = 3 ot2 newn newz 
       nst = 0

***************** dst is MEMORY ******************
 st = 100 rt = '[t4]  -> MAR' 	imar ot4 
 st = 101 rt = '[t2]  -> mdr' 	imdr ot2 newz newn
 st = 102 rt = '[mdr] -> [MAR]' 	write
       nst = 0

*********** END: Write back the data *************

********  END: Single Operand Instruction   *******

**** START: ALU redirect to single/double INS******
 st = 150
       cond = 'ir1512' value = 0 nst = 70
       cond = 'ir1512' value = 1 nst = 250
       cond = 'ir1512' value = 2 nst = 255
       cond = 'ir1512' value = 3 nst = 271
       nst = 90

***** END: Redirect to single or double ALU*******

******* START: DOUBLE OPERAND INSTRUCTIONS *******

***** Source addressing mode is obtained here *****
 st = 155
      cond = 'ir118' value = 0 nst = 160
      cond = 'ir118' value = 1 nst = 165
      cond = 'ir118' value = 2 nst = 170
      cond = 'ir118' value = 3 nst = 175
      cond = 'ir118' value = 4 nst = 245
      cond = 'ir118' value = 5 nst = 245
      cond = 'ir118' value = 6 nst = 245
     
****************  Register mode ******************
 st = 160 rt = '[src]  -> t2'    	it2 rac = 2 
       nst = 20

************ Register Indirect mode **************
 st = 165 rt = '[src]  -> t3'    	it3 rac = 2 
       nst = 295

************** Autoincrement mode ****************
 st = 170 rt = '[src]  -> t3'    	it3 rac = 2
 st = 171 rt = '[src]+1-> q'   	ib p1 oadder rac = 2
 st = 172 rt = '[q]    -> src'	oq wac = 2
       nst = 295

************** Autodecrement mode ****************
 st = 175 rt = '[src]  -> t1'    	it1 rac = 2
 st = 176 rt = '[t1]-1 -> q'    	oa comp oadder
 st = 177 rt = '[q]    -> src'     	oq wac = 2
 st = 178 rt = '[src]  -> t3'    	it3 rac = 2 
       nst = 295

***************** Indexed mode *******************  
 st = 230 rt = '[mdr]  -> t1'    	it1 omdr
 st = 231 rt = '[t1]+[src]->q'	rac = 2 ib oa oadder
 st = 232 rt = '[q]    -> t3'      	oq it3  
       nst = 295

***************** Absolute mode ******************
 st = 235 rt = '[mdr]  -> t3'    	it3 omdr
       nst = 295

**************** Immediate mode ******************
 st = 240 rt = '[mdr]  -> t2'    	it2 omdr
       nst = 20

************** SECOND FETCH src ******************
 st = 245 rt = '[pc]   -> MAR'    	rac = 1 rn = 3 imar 
 st = 246 rt = '[[MAR]]-> mdr' 	read
 st = 247 rt = '[pc]+1 -> q'    	oadder p1 ib rac = 1 rn = 3  
 st = 248 rt = '[q]    -> pc'      	wac = 1 wn = 3 oq 
       cond = 'ir118' value = 4 nst = 230
       cond = 'ir118' value = 5 nst = 235
       cond = 'ir118' value = 6 nst = 240

********* START: ALU DOUBLE INSTRUCTION **********

*************** ADD INSTRUCTION ******************
 st = 250 rt = '[t2]   -> t1' 	it1 ot2 
 st = 251 rt = '[t5]+[t1]->q' 	oadder oa ib ot5 newv newc 
 st = 252 rt = '[q]    -> t2' 	it2 oq 
       nst = 90

*************** SUB INSTRUCTION ******************
 st = 255 rt = '[t5]   -> t1' 	it1 ot5 
 st = 256 rt = '[t1]-[t2]->q' 	oadder oa ib comp p1 ot2 newv newc 
 st = 257
	cond = 'c' value = 0 nst = 258
	cond = 'c' value = 1 nst = 259
 st = 258 setc 
       nst = 260
 st = 259 clrc
 st = 260 rt = '[q]    -> t2' 	it2 oq 
       nst = 90

************** MOVE INSTRUCTION ******************
************* CLEAR DESIRED FLAGS ****************

 st = 271 rt = 'clear c & v' 	clrv clrc
       nst = 90    

********* END: ALU DOUBLE INSTRUCTION ************

*********** START: READ SRC FROM MEMORY **********
 st = 295 rt = '[t3]   -> MAR' 	imar ot3 
 st = 296 rt = '[[MAR]]-> mdr' 	read
 st = 297 rt = '[mdr]  -> t2' 	omdr it2  
       nst = 20
*********** END: READ SRC FROM MEMORY ************

********* END: DOUBLE OPERAND INSTRUCTIONS ******* 