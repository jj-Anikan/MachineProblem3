*** MP 3 BY ETHAN LONG AND JACOB MAYHEW ***

******  Start fetch cycle *****
 st = 0	rt = '[pc] -> mar'	imar rac = 1 rn = 3
 st = 1	rt = '[[mar]] -> mdr'	read
 st = 2	rt = '[mdr] -> ir'	iir omdr
 st = 3	rt = '[pc]+1 -> q'	rac = 1 rn = 3 ib oadder p1
 st = 4	rt = '[q] -> pc'		oq wac = 1 wn = 3
	cond = 'ir1512' value = 0 nst = 20
 cond = 'ir158'  value = 0 nst = 10
	nst = 200


****	Halt *****
 st = 10 halt

******     Single Operand Instruction   *******

*** START *****
 st = 20
 cond = 'ir64' value = 0 nst = 30
 cond = 'ir64' value = 1 nst = 40
 cond = 'ir64' value = 2 nst = 45
 cond = 'ir64' value = 3 nst = 50
 cond = 'ir64' value = 4 nst = 85
 cond = 'ir64' value = 5 nst = 85
      nst = 0

********* REGISTER **********
 st = 30 rt = '[dst]-> t5' 		it5 rac = 3 
       nst = 190

********* REGISTER INDIRECT *********
 st = 40 rt = '[dst]  -> t4'    	it4 rac = 3 
      nst = 95

*********** AUTOINC ***********
 st = 45 rt = '[dst]  -> t4'    	it4 rac = 3
 st = 46 rt = '[dst]+1-> q'  	      rac = 3 ib oadder p1
 st = 47 rt = '[q]    -> dst'     	oq wac = 3   
       nst = 95

*********** AUTODEC ***********
 st = 50 rt = '[dst]  -> t1'   	rac = 3 it1 
 st = 51 rt = '[t1]-1 -> q'   	oadder oa comp  
 st = 52 rt = '[q]    -> dst'    	wac = 3 oq  
 st = 53 rt = '[dst]  -> t4'   	rac = 3 it4    
       nst = 95
      
********** INDEX **********
 st = 55 rt = '[mdr]  -> t1'   	it1 omdr
 st = 56 rt = '[t1]+[dst]-> q' 	rac = 3 ib oa oadder
 st = 57 rt = '[q]    -> t4'     	it4 oq
       nst = 95

******** ABSOLUTE ***********
 st = 60 rt = '[mdr]  -> t4'   	omdr it4  
       nst = 95

**** FETCH ******
 st = 85 rt = '[pc]   -> mar'  	rac = 1 rn = 3 imar
 st = 86 rt = '[[mar]]-> mdr'       read
 st = 87 rt = '[pc]+1 -> q'  	      rac = 1 rn = 3 oadder p1 ib
 st = 88 rt = '[q]    -> pc'    	wac = 1 wn = 3 oq 
  cond = 'ir64' value = 4 nst = 55
  cond = 'ir64' value = 5 nst = 60

***** END: Update temp reg based on ADDR MOD *****
 
***** START: READ DESTINATION OPERAND from MEM ***
 st = 95 rt = '[t4]   -> mar' 	imar ot4 
 st = 96 rt = '[[mar]]-> mdr' 	read
 st = 97 rt = '[mdr]  -> t5' 	      omdr it5 
       nst = 190

***** END: READ DESTINATION OPERAND from MEM ***

********* START: ALU single inst *********
 st = 100
  cond = 'ir118' value = 2 nst = 110
  cond = 'ir118' value = 3 nst = 120
  cond = 'ir118' value = 4 nst = 125
       nst = 10 

********* INCREMENT INSTRUCTION **********
 st = 110 rt = '[t5]   -> t1' 	it1 ot5 
 st = 111 rt = '[t1]+1 -> q' 	      oadder p1 oa newv newc 
 st = 112 rt = '[q]    -> t2' 	it2 oq 
       nst = 140

******** DECREMENT INSTRUCTION ***********
 st = 120 rt = '[t5]   -> t1' 	it1 ot5 
 st = 121 rt = '[t1]-1 -> q' 	      oadder comp newv newc oa 
 st = 122 rt = '[q]    -> t2' 	it2 oq 
       nst = 140

******** NEGATION INSTRUCTION ***********

 st = 125 rt = '0-[t5] -> q'        ib comp p1 newv newc ot5 oadder
 st = 126 rt = '[q]    -> t2' 	it2 oq
       nst = 140
 
*********  END: ALU single inst  *********

***** START: Write back the data *********
 st = 140
  cond = 'ir64' value = 0 nst = 150
  cond = 'ir64' value = 1 nst = 160
  cond = 'ir64' value = 2 nst = 160
  cond = 'ir64' value = 3 nst = 160
  cond = 'ir64' value = 4 nst = 160
  cond = 'ir64' value = 5 nst = 160

********* Register Mode (dst) *********
 st = 150 rt = '[t2]   -> dst' 	wac = 3 ot2 newn newz 
       nst = 0

********* dst is MEMORY **********
 st = 160 rt = '[t4]  -> mar' 	imar ot4 
 st = 161 rt = '[t2]  -> mdr' 	imdr ot2 newz newn
 st = 162 rt = '[mdr] -> [mar]' 	write
       nst = 0

******* END: Write back the data *********

****  END: Single Operand Instruction   *******

**** START: ALU redirect to single/double INS******
 st = 190
  cond = 'ir1512' value = 0 nst = 100
  cond = 'ir1512' value = 1 nst = 250
  cond = 'ir1512' value = 2 nst = 271
       nst = 140

***** END: Redirect to single or double ALU*******

******* START: DOUBLE OPERAND INSTRUCTIONS *******


******* START: READ SRC FROM MEMORY ******
 st = 195 rt = '[t3]   -> mar' 	imar ot3 
 st = 196 rt = '[[mar]]-> mdr' 	read
 st = 197 rt = '[mdr]  -> t2' 	omdr it2  
       nst = 20
******* END: READ SRC FROM MEMORY ********


***** Source addressing mode is obtained here *****
 st = 200
 cond = 'ir118' value = 0 nst = 210
 cond = 'ir118' value = 1 nst = 215
 cond = 'ir118' value = 2 nst = 220
 cond = 'ir118' value = 3 nst = 225
 cond = 'ir118' value = 4 nst = 245
 cond = 'ir118' value = 5 nst = 245
 cond = 'ir118' value = 6 nst = 245
 cond = 'ir118' value = 7 nst = 250 
     
********  Register mode **********
 st = 210 rt = '[src]  -> t2'    	rac = 2 it2
       nst = 20

******** Register Indirect mode **********
 st = 215 rt = '[src]  -> t3'    	rac = 2 it3
       nst = 195

********** Autoincrement mode ********
 st = 220 rt = '[src]  -> t3'    	rac = 2 it3
 st = 221 rt = '[src]+1-> q'   	rac = 2 ib oadder p1
 st = 222 rt = '[q]    -> src'	wac = 2 oq
       nst = 195

********** Autodecrement mode ********
 st = 225 rt = '[src]  -> t1'    	rac = 2 it1
 st = 226 rt = '[t1]-1 -> q'    	oa comp oadder
 st = 227 rt = '[q]    -> src'      wac = 2 oq
 st = 228 rt = '[src]  -> t3'    	rac = 2 it3
       nst = 195

********* Indexed mode ***********  
 st = 230 rt = '[mdr]  -> t1'    	it1 omdr
 st = 231 rt = '[t1]+[src]->q'	rac = 2 ib oa oadder
 st = 232 rt = '[q]    -> t3'      	oq it3  
       nst = 195

********* Absolute mode **********
 st = 235 rt = '[mdr]  -> t3'    	it3 omdr
       nst = 195

******** Immediate mode **********
 st = 240 rt = '[mdr]  -> t2'    	it2 omdr
       nst = 20

********** SECOND FETCH src **********
 st = 245 rt = '[pc]   -> mar'    	rac = 1 rn = 3 imar 
 st = 246 rt = '[[mar]]-> mdr' 	read
 st = 247 rt = '[pc]+1 -> q'    	rac = 1 rn = 3 oadder p1 ib
 st = 248 rt = '[q]    -> pc'      	wac = 1 wn = 3 oq 
  cond = 'ir118' value = 4 nst = 230
  cond = 'ir118' value = 5 nst = 235
  cond = 'ir118' value = 6 nst = 240

***** START: ALU DOUBLE INSTRUCTION ******

*********** ADD INSTRUCTION **********
 st = 250 rt = '[t2]   -> t1' 	it1 ot2 
 st = 251 rt = '[t5]+[t1]->q' 	oadder oa newv newc ib ot5
 st = 252 rt = '[q]    -> t2' 	it2 oq 
       nst = 140

*********** MOVE INSTRUCTION *********
 st=260 rt='[T3] -> T1' it1 ot3
 st=261 rt='[T1] -> T2' it2 it1
       nst=90

***** END: ALU DOUBLE INSTRUCTION ********



***** END: DOUBLE OPERAND INSTRUCTIONS ******* 