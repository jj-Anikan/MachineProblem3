*** MP 3 BY ETHAN LONG AND JACOB MAYHEW ***

******  Start fetch cycle *****
 st = 0	rt = '[pc] -> mar'	imar rac = 1 rn = 3
 st = 1	rt = '[[mar]] -> mdr'	read
 st = 2	rt = '[mdr] -> ir'	iir omdr
 st = 3	rt = '[pc]+1 -> q'	rac = 1 rn = 3 ib oadder p1
 st = 4	rt = '[q] -> pc'		oq wac = 1 wn = 3
	cond = 'ir1512' value = 0 nst = 20
 cond = 'ir158'  value = 0 nst = 10
	nst = 200


***	Halt ***
 st = 10 halt

*** single operand instructions ***

*** start ***
 st = 20
 cond = 'ir64' value = 0 nst = 30
 cond = 'ir64' value = 1 nst = 40
 cond = 'ir64' value = 2 nst = 45
 cond = 'ir64' value = 3 nst = 50
 cond = 'ir64' value = 4 nst = 85
 cond = 'ir64' value = 5 nst = 85
      nst = 0

*** register ***
 st = 30 rt = '[dst]-> t5' 		it5 rac = 3 
       nst = 190

*** register indirect ***
 st = 40 rt = '[dst]  -> t4'    	it4 rac = 3 
       nst = 80

*** autoinc ***
 st = 45 rt = '[dst]  -> t4'    	it4 rac = 3
 st = 46 rt = '[dst]+1-> q'  	      rac = 3 ib oadder p1
 st = 47 rt = '[q]    -> dst'     	oq wac = 3   
       nst = 80

*** autodec ***
 st = 50 rt = '[dst]  -> t1'   	rac = 3 it1 
 st = 51 rt = '[t1]-1 -> q'   	oadder oa comp  
 st = 52 rt = '[q]    -> dst'    	wac = 3 oq  
 st = 53 rt = '[dst]  -> t4'   	rac = 3 it4    
       nst = 80
      
*** index ***
 st = 55 rt = '[mdr]  -> t1'   	it1 omdr
 st = 56 rt = '[t1]+[dst]-> q' 	rac = 3 ib oa oadder
 st = 57 rt = '[q]    -> t4'     	it4 oq
       nst = 80

*** absolute ***
 st = 60 rt = '[mdr]  -> t4'   	omdr it4  
       nst = 80

*** read in dest from memory ***
 st = 80 rt = '[t4]   -> mar' 	imar ot4 
 st = 81 rt = '[[mar]]-> mdr' 	read
 st = 82 rt = '[mdr]  -> t5' 	      omdr it5 
       nst = 190

*** fetch ***
 st = 85 rt = '[pc]   -> mar'  	rac = 1 rn = 3 imar
 st = 86 rt = '[[mar]]-> mdr'       read
 st = 87 rt = '[pc]+1 -> q'  	      rac = 1 rn = 3 oadder p1 ib
 st = 88 rt = '[q]    -> pc'    	wac = 1 wn = 3 oq 
  cond = 'ir64' value = 4 nst = 55
  cond = 'ir64' value = 5 nst = 60

*** single instructions ***
 st = 100
  cond = 'ir118' value = 2 nst = 110
  cond = 'ir118' value = 3 nst = 120
       nst = 10 

*** inc ***
 st = 110 rt = '[t5]   -> t1' 	it1 ot5 
 st = 111 rt = '[t1]+1 -> q' 	      oadder p1 oa newv newc 
 st = 112 rt = '[q]    -> t2' 	it2 oq 
       nst = 140

*** dec ***
 st = 120 rt = '[t5]   -> t1' 	it1 ot5 
 st = 121 rt = '[t1]-1 -> q' 	      oadder comp newv newc oa 
 st = 122 rt = '[q]    -> t2' 	it2 oq 
       nst = 140

*** neg ***

 st = 125 rt = '[t5]   -> t1'     it1 ot5
 st = 126 rt = '0-[t1] -> q' 	    ib comp p1 newv newc ot5 oadder
 st = 127 rt = '[q]    -> t2'     it2 oq
       nst = 140

*** write ***
 st = 140
  cond = 'ir64' value = 0 nst = 150
  cond = 'ir64' value = 1 nst = 160
  cond = 'ir64' value = 2 nst = 160
  cond = 'ir64' value = 3 nst = 160
  cond = 'ir64' value = 4 nst = 160
  cond = 'ir64' value = 5 nst = 160

*** register mode ***
 st = 150 rt = '[t2]  -> dst' 	wac = 3 ot2 newn newz 
       nst = 0

*** dst to memory ***
 st = 160 rt = '[t4]  -> mar' 	imar ot4 
 st = 161 rt = '[t2]  -> mdr' 	imdr ot2 newz newn
 st = 162 rt = '[mdr] -> [mar]' 	write
       nst = 0

*** select double or single ***
 st = 190
  cond = 'ir1512' value = 0 nst = 100
  cond = 'ir1512' value = 1 nst = 250
  cond = 'ir1512' value = 1 nst = 260
  cond = 'ir1512' value = 3 nst = 271
       nst = 140

*** read src from memory for double instructions ***
 st = 195 rt = '[t3]   -> mar' 	imar ot3 
 st = 196 rt = '[[mar]]-> mdr' 	read
 st = 197 rt = '[mdr]  -> t2' 	omdr it2  
       nst = 20

*** select addressing mode ***
 st = 200
 cond = 'ir118' value = 0 nst = 210
 cond = 'ir118' value = 1 nst = 215
 cond = 'ir118' value = 2 nst = 220
 cond = 'ir118' value = 3 nst = 225
 cond = 'ir118' value = 4 nst = 245
 cond = 'ir118' value = 5 nst = 245
 cond = 'ir118' value = 6 nst = 245
     
*** register for double inst ***
 st = 210 rt = '[src]  -> t2'    	rac = 2 it2
       nst = 20

*** register indirect for double inst ***
 st = 215 rt = '[src]  -> t3'    	rac = 2 it3
       nst = 195

*** autoinc for double inst ***
 st = 220 rt = '[src]  -> t3'    	rac = 2 it3
 st = 221 rt = '[src]+1-> q'   	rac = 2 ib oadder p1
 st = 222 rt = '[q]    -> src'	wac = 2 oq
       nst = 195

*** autodec for double inst ***
 st = 225 rt = '[src]  -> t1'    	rac = 2 it1
 st = 226 rt = '[t1]-1 -> q'    	oa comp oadder
 st = 227 rt = '[q]    -> src'      wac = 2 oq
 st = 228 rt = '[src]  -> t3'    	rac = 2 it3
       nst = 195

*** index for double inst ***
 st = 230 rt = '[mdr]  -> t1'    	it1 omdr
 st = 231 rt = '[t1]+[src]->q'	rac = 2 ib oa oadder
 st = 232 rt = '[q]    -> t3'      	oq it3  
       nst = 195

*** absolute for double inst ***
 st = 235 rt = '[mdr]  -> t3'    	it3 omdr
       nst = 195

*** immediate for double inst ***
 st = 240 rt = '[mdr]  -> t2'    	it2 omdr
       nst = 20

*** fetch for src ***
 st = 245 rt = '[pc]   -> mar'    	rac = 1 rn = 3 imar 
 st = 246 rt = '[[mar]]-> mdr' 	read
 st = 247 rt = '[pc]+1 -> q'    	rac = 1 rn = 3 oadder p1 ib
 st = 248 rt = '[q]    -> pc'      	wac = 1 wn = 3 oq 
  cond = 'ir118' value = 4 nst = 230
  cond = 'ir118' value = 5 nst = 235
  cond = 'ir118' value = 6 nst = 240

*** double instructions ***

*** add **
 st = 250 rt = '[t2]   -> t1' 	it1 ot2 
 st = 251 rt = '[t5]+[t1]->q' 	oadder oa newv newc ib ot5
 st = 252 rt = '[q]    -> t2' 	it2 oq 
       nst = 140

*** sub ***

*** move ***
 st=260 rt='[T3] -> T1' it1 ot3
 st=261 rt='[T1] -> T2' it2 it1
       nst=90

*** end of file ***





****************************************************************
**************************************************
********* START: SPECIAL INSTRUCTIONS *******
**************************************************
****************************************************************

**************************************************
********** SPECIAL BRANCH INSTRUCTION ************
**************************************************

****### Branch instructions are more complex ####***
****### Refer to Priya.dat file and it's details file ###****

 st=250
****go to set/clear***
       cond='ir75' 	value=1 nst=300  
       cond='ir76' 	value=2 nst=252
       nst=10

 st=252
	cond='ir5' value=0 nst=253
 nst=270
 st=253
        cond='ir4' value=0 nst=254
 nst=270
 st=254
        cond='ir3' value=0 nst=255
 nst=270
 st=255
        cond='ir2' value=0 nst=256
 nst=270
 st=256
        cond='ir1' value=0 nst=257
 nst=270
 st=257
        cond='ir0' value=0 nst=325
 nst=270


**************************************************
************** START: BRANCHING*******************
**************************************************
 st=270 rt='[pc] -> mar'     imar rac=1 rn=3
 st=271 rt='[[mar]] -> mdr'  read
 st=272 rt='[mdr] -> t1'     omdr it1
 st=273 rt='[pc] + 1 -> q'   rac=1 rn=3 ib p1 oadder
 st=274 rt='[q] -> pc'       oq wac=1 wn=3
        cond='ir5'   value=1 nst=275
        cond='ibrch' value=1 nst=276
 nst=0
 st=275 rt='ibrch'
        cond='ibrch' value=0 nst=276
 nst=0

 st=276 rt='[pc]+[t1] -> q'  rac=1 rn=3 ib oa oadder
 st=277 rt='[q] -> pc'       oq wac=1 wn=3
 nst=0
**************************************************
*************** END: BRANCHING********************
**************************************************


**************************************************
************** START: SET/CLEAR*******************
**************************************************
set/clr
 st=300 
	cond='ir4' value=1 nst=311

******************** CLEAR ************************
 st=301 
	cond='ir3' value=0 nst=303
 st=302 rt='clr c'		clrc
	nst=0 
 st=303 
	cond='ir2' value=0 nst=305
 st=304 rt='clr v'		clrv
	nst=0 
 st=305 
	cond='ir1' value=0 nst=308
 st=306 rt='1-> q'		p1 oadder
 st=307 rt='[q]-> bus'		oq newz
	nst=0 
 st=308
	cond='ir0' value=0 nst=0
 st=309 rt='1-> q'		p1 oadder
 st=310 rt='[q]-> bus'		oq newn
 	nst=0

*********************SET**************************
 st=311 
	cond='ir3' value=0 nst=313
 st=312 rt='set c'		setc
	nst=0 
 st=313 
	cond='ir2' value=0 nst=315
 st=314 rt='set v'		setv
	nst=0 
 st=315 
	cond='ir1' value=0 nst=318
 st=316 rt='0-> q'		oadder
 st=317 rt='[q]-> bus'		oq newz
	nst=0 
 st=318 
	cond='ir0' value=0 nst=0
 st=319 rt='-1-> q'		comp oadder
 st=320 rt='[q]-> bus'		oq newn
	 nst=0
 
**************************************************
************** END: SET/CLEAR*******************
**************************************************


**************************************************
************START: RTS INSTRUCTION ***************
**************************************************
 st=325 rt='[sp]->mar'		rac=1 rn=2 imar
 st=326 rt='[[mar]]->mdr'	read
 st=327 rt='[mdr]->pc' 		omdr wac=1 wn=3
 st=328 rt='[sp]+1->q' 		rac=1 rn=2 ib p1 oadder
 st=329 rt='[q]->sp' 		oq wac=1 wn=2
        nst=0
**************************************************
*************END: RTS INSTRUCTION ****************
**************************************************



****************************************************************
**************************************************
********* END: SPECIAL INSTRUCTIONS *******
**************************************************
****************************************************************





****************************************************************
**************************************************
****** START: CONTINUED ALU single inst **********
**************************************************
****************************************************************

**************************************************
*************** CLR  INSTRUCTION *****************
**************************************************
 st=400 rt='0->q' 		oadder
 st=401 rt='[q]->t2' 		oq it2 clrc clrv
        nst=90

**************************************************
************** COMP  INSTRUCTION *****************
**************************************************
 st=402 rt='[t5]bar->q' 	ot5 ib comp oadder
 st=403 rt='[q]->t2' 		oq it2 clrc clrv
        nst=90

**************************************************
*************** JMP  INSTRUCTION *****************
**************************************************
 st=405
       cond='ir64' value=0 nst=407
 st=406 rt='[t4]->pc' 		ot4 wac=1 wn=3
        nst=0
 st=407 rt='[t5]->pc' 		ot5 wac=1 wn=3
        nst=0

**************************************************
*************** TST  INSTRUCTION *****************
**************************************************
 st=410 rt='[t5]->t1' 		ot5 it1
 st=411 rt='[t1]-0->q' 		oa oadder comp p1
 st=412 rt='[q]->t5' 		oq it5 newz newn clrc clrv
        nst=0

**************************************************
*************** JSR  INSTRUCTION *****************
**************************************************
 st=415 rt='[sp]->t1' 		rac=1 rn=2 it1
 st=416 rt='[t1]-1->q' 		oa comp oadder
 st=417 rt='[q]->sp' 		oq wac=1 wn=2
 st=418 rt='[sp]->mar' 		rac=1 rn=2 imar
 st=419 rt='[pc]->mdr' 		rac=1 rn=3 imdr
 st=420 rt='[mdr]->mar' 	write
        nst=405


****************************************************************
**************************************************
******** END: CONTINUED ALU single inst **********
**************************************************
****************************************************************



**************************************************
************* START: DBRA INSTRUCTION ************
**************************************************
 st=450 rt='[pc]->mar' 		rac=1 rn=3 imar
 st=451 rt='[[mar]]->mdr' 	read
 st=452 rt='[mdr]->t2' 		omdr it2
 st=453 rt='[pc]+1 -> q'  	rac=1 rn=3 ib p1 oadder
 st=454 rt='[q] -> pc'    	oq wac=1 wn=3
 st=455 rt='[t5]->t1' 		ot5 it1
 st=456 rt='[t1]-1->q' 		oa comp oadder
 st=457 rt='[q]->t5' 		oq it5
        cond='busn' value=1 nst=461
 st=458 rt='[pc]->t1' 		rac=1 rn=3 it1
 st=459 rt='[t1]+[t2]->q' 	oa ot2 ib oadder
 st=460 rt='[q]->pc' 		oq wac=1 wn=3
 st=461
       cond='ir64' value=0 nst=465
 st=462 rt='[t4]->mar' 		ot4 imar
 st=463 rt='[t5]->mdr' 		ot5 imdr
 st=464 rt='[mdr]->[mar]' 	write
        nst=0
 st=465 rt='[t5]->dstreg' 	ot5 wac=3
        nst=0
**************************************************
*************** END: DBRA INSTRUCTION ************
**************************************************



****************************************************************
**************************************************
****** START: CONTINUED ALU double inst **********
**************************************************
****************************************************************


**************************************************
************* EXCHANGE INSTRUCTION ***************
**************************************************
 st=500
      cond='ir118' value=0 nst=501
      nst=502
 st=501 rt='[t5]->srcreg' 	ot5 wac=2
       nst=505
 st=502 rt='[t5]->mdr' 		ot5 imdr
 st=503 rt='[t3]->mar' 		ot3 imar
 st=504 rt='[mdr]->[mar]' 	write
 st=505
      cond='ir64' value=0 nst=506
      nst=507
 st=506 rt='[t2]->dstreg' 	ot2 wac=3
       nst=0
 st=507 rt='[t2]->mdr' 		ot2 imdr
 st=508 rt='[t4]->mar' 		ot4 imar
 st=509 rt='[mdr]->[mar]' 	write
       nst=0

**************************************************
*************** OR INSTRUCTION *******************
**************************************************

 st=515 rt='[t2]or[t5]->t2' 	ot2 ot5 ib oadder
 st=516 rt='[q]->t2' 		oq it2 clrc clrv 
       nst=90


**************************************************
*************** AND  INSTRUCTION *****************
**************************************************
 st=520 rt='[t2]bar->q' 	ot2 ib comp oadder
 st=521 rt='[q]->t2'	 	oq it2
 st=522 rt='[t5]bar->q' 	ot5 ib comp oadder
 st=523 rt='[q]->t5' 		oq it5
 st=524 rt='[t2]+[t5]->q' 	ot2 ot5 ib oadder
 st=525 rt='[q]->t2' 		oq it2
 st=526 rt='[t2]bar->q' 	ot2 comp ib oadder
 st=527 rt='[q]->t2' 		oq it2 clrc clrv
        nst=90


****************************************************************
**************************************************
******** END: CONTINUED ALU double inst **********
**************************************************
****************************************************************